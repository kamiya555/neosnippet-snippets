# javascript

# Debugger#{{{
snippet debugger
alias db
options head
  debugger;

snippet console-log
alias cl
options head
  console.log(${0:TARGET});

snippet console-warn
alias cw
options head
  console.warn(${0:TARGET});

snippet console-error
alias ce
options head
  console.error(${0:TARGET});
#}}}

# general #{{{

snippet var
alias va
abbr variable
options word
  var ${1:#:variable} = ${2:TARGET} || {};

snippet function
alias func
abbr    function
options word
  function ${1:#:function_name}(${2:#:argument}) {
    ${0:TARGET}
  }

snippet parseint
alias pi
  parseInt(${1:#:variable}, 10);

snippet varfunc
alias vf
abbr func
options word
  var ${1:#:function_name} = function(${2:#:argument}){
    ${0:TARGET}
  };

snippet proto
options head
  ${1:#:class_name}.prototype.${2:#:method_name} = function(${3:#:first_argument}) {
    ${0:TARGET}
  };

snippet condition
alias c,co
abbr Condition Operator
options word
  ${1:#:condition} ? ${2:#:expr1} : ${3:#:expr2};

snippet json
alias js
options head
  JSON.stringify(${1:TARGET}, ${2:null}, ${3:2});

snippet jsc
options head
  console.log(JSON.stringify(${1:TARGET}, ${2:null}, ${3:2}));

snippet setTimeout-function
options head
  setTimeout(${1:#:function}, ${1:10});

snippet switch
alias sw
options head
  switch (${1:#:var}) {
    case ${2:#:val}:
      ${0:TARGET}
      break;
    default:
      ${1:TARGET}
      break;
  }

snippet if
alias if
abbr if
options head
  if (${1:true}) {
    ${0:TARGET}
  }

snippet if-elseif-else
alias ifel
abbr if elseif else
options head
  if (${1:#:condition1}) {
    ${3:TARGET}
  } else if (${2:#:condition2}) {
    ${4:TARGET}
  } else {
    ${5:TARGET}
  }

snippet if-else
alias ife
abbr if-else
options head
  if (${1:#:condition}) {
    ${2:TARGET}
  } else {
    ${3}
  }

snippet for
alias fo
options head
  for (var ${1:i} = 0; $1 < ${2:#:Things}.length; $1++) {
    ${0:TARGET}
  }

snippet forin
alias fi
options head
  for (var ${1:i} in ${2:#:Things}) {
    ${0:TARGET}
  }

snippet while
alias wh
options head
  while (${1:true}) {
    ${0:TARGET}
  }

snippet try
alias tr
options head
  try {
    ${1:TARGET}
  } catch (${2:e}) {
    ${3}
  }

snippet try_finally
options head
  try {
    ${1:TARGET}
  } catch (${2:e}) {
    ${3}
  } finally {
    ${4}
  }

snippet key-value
abbr :,
options word
  ${1:#:value_name}: ${0:#:value},

#}}}

# jQuery #{{{
snippet jq
abbr jquery document load
options word
  $(function() {
    ${0:TARGET}
  });

snippet jqclass
alias jqc
abbr jquery class selector
options word
  $(".${0:#:class}")${0:TARGET}

snippet jqid
alias jqi
abbr jquery id selector
options word
  $("#${0:#:id}")${0:TARGET}

snippet jqinput
alias jqin
abbr jquery input[type=?]
options word
  $("input[type=${0:#:type}]")${0:TARGET}

snippet click
abbr jquery onClick
alias cl
options word
  $("#${0:#:selector}").click(function(){
    ${0:TARGET}
  };

snippet ajax
alias aj
abbr jquery Ajax
options word
  $.ajax({
    url: "${0:#:url}",
    data: ${1:#:data}
  })
  .done(function(){
    alert("done");
    ${2:TARGET}
  })
  .fail(function() {
    alert("fail");
    ${3:TARGET}
  })
  .always(){
    alert("always");
    ${4:TARGET}
  });

snippet onclick
abbr jquery onClick
alias on,onc
options word
  $(document).on("click", "#${0:#:selector}", function() {
    ${0:TARGET}
  });

snippet each
abbr jquery each
options word
  $("#${0:#:selector}").each(function() {
    ${0:TARGET}
  });

snippet jqp
abbr jquery plugin
options head
  ;(function($){
    'use strict';
    $.fn.${1:#:plugin} = function(options) {
      var settings = $.extend({
      }, options);
      ${2:TARGET}
      return this;
    };
  })(jQuery);

#}}}

# Node #{{{
snippet     import
abbr        import { member, ... } from "module-name";
options     head
  import { ${1:MEMBERS} } from "${0:TARGET}";

snippet     import-default
abbr        import defaultMember from "module-name";
options     head
  import ${1:defaultMember} from "${0:TARGET}";

snippet     import-all
abbr        import * as NAME from "...";
options     head
  import * as ${1:NAME} from "${0:TARGET}";

snippet     import-default-member
abbr        import defaultMember, { member, ... } from "module-name";
options     head
  import ${1:defaultMember}, { ${2:MEMBERS} } from "${0:TARGET}";

#}}}

snippet     class
abbr        class {...}
options     head
  class ${1:#:NAME} {
    constructor(${2:#:ARGS}) {
      ${0:TARGET}
    }
  }

snippet     class-extends
abbr        class extends {...}
options     head
  class ${1:#:NAME} extends ${2:#:SuperClass} {
    constructor(${3:#:ARGS}) {
      ${0:TARGET}
    }
  }

snippet     static
options     head
  static ${1:#:NAME}(${2:#:ARGS}) {
    ${0:TARGET}
  }

snippet     set
options     head
  set ${1:#:NAME}(${2:#:ARGS}) {
    ${0:TARGET}
  }

snippet     get
options     head
  get ${1:#:NAME}() {
    ${0:TARGET}
  }


